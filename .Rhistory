get_population_of_country("CHN", df_corona)
if (!require("pacman")) install.packages("pacman")
pacman::p_load(
tidyverse,
lubridate,
prophet,
wbstats,
shiny)
df_corona_raw <- read_csv("input/novel-corona-virus-2019-dataset/covid_19_data.csv")
df_corona_raw <- df_corona_raw %>% rename(ProvinceOrState = `Province/State`,
CountryOrRegion = `Country/Region`,
LatestUpdate = `Last Update`)
df_corona <- df_corona_raw %>% select(-c(LatestUpdate, SNo))
df_corona <- df_corona %>% mutate(Confirmed = as.integer(Confirmed),
Deaths = as.integer(Deaths),
Recovered = as.integer(Recovered),
ObservationDate = parse_date_time(ObservationDate, orders = c("m/d/Y", "m/d/y")),
#LatestUpdate = parse_date_time(LatestUpdate, orders = c("m/d/Y", "m/d/y"), locale = "eng")
)
df_corona <- df_corona %>% mutate(ObservationDate = as.Date(ObservationDate))
df_corona <- df_corona %>% mutate(YesterDate = ObservationDate - 1)
df_corona <- df_corona %>% left_join(df_corona, by = c("YesterDate" = "ObservationDate", "ProvinceOrState", "CountryOrRegion"),
suffix = c("", "TillYesterDate")) %>% select(-YesterDateTillYesterDate)
df_corona <- df_corona %>% mutate(ConfirmedTillYesterDate = ifelse(is.na(ConfirmedTillYesterDate), Confirmed, ConfirmedTillYesterDate),
RecoveredTillYesterDate = ifelse(is.na(RecoveredTillYesterDate), Recovered, RecoveredTillYesterDate),
DeathsTillYesterDate = ifelse(is.na(DeathsTillYesterDate), Deaths, DeathsTillYesterDate))
df_corona <- df_corona %>% mutate(NewTodayConfirmed = Confirmed - ConfirmedTillYesterDate,
NewTodayRecovered = Recovered - RecoveredTillYesterDate,
NewTodayDeaths    = Deaths    - DeathsTillYesterDate)
corona_latest <- df_corona %>% filter(ObservationDate %in% max(df_corona$ObservationDate))
sum(corona_latest$Confirmed)
sum(corona_latest$Deaths)
sum(corona_latest$Recovered)
##----------------------------------------------------------------------------##
## Country-Wise population ####
##----------------------------------------------------------------------------##
countries <- df_corona %>% distinct(CountryOrRegion)
countries <- countries %>% mutate(corona_df_name = CountryOrRegion,
wb_df_name = CountryOrRegion)
world_population <- wb(indicator = "SP.POP.TOTL", startdate = 2017, enddate = 2017) %>%
select(iso3c, country, population = value)
df_population <- countries %>% left_join(world_population,
by = c("wb_df_name" = "country"))
df_population[df_population$CountryOrRegion == "Mainland China", "iso3c"] = "CHN"
df_population[df_population$CountryOrRegion == "Hong Kong", "iso3c"] = "HKG"
df_population[df_population$CountryOrRegion == "Macau", "iso3c"] = "MAC"
df_population[df_population$CountryOrRegion == "US", "iso3c"] = "USA"
df_population[df_population$CountryOrRegion == "South Korea", "iso3c"] = "KOR"
df_population[df_population$CountryOrRegion == "Ivory Coast", "iso3c"] = "CIV"
df_population[df_population$CountryOrRegion == "UK", "iso3c"] = "GBR"
df_population[df_population$CountryOrRegion == "Egypt", "iso3c"] = "EGY"
df_population[df_population$CountryOrRegion == "Iran", "iso3c"] = "IRN"
df_population[df_population$CountryOrRegion == "Saint Barthelemy", "iso3c"] = "BLM"
df_population[df_population$CountryOrRegion == "Palestine", "iso3c"] = "PSE"
df_population[df_population$CountryOrRegion == "Russia", "iso3c"] = "RUS"
df_population[df_population$CountryOrRegion == "Slovakia", "iso3c"] = "SVK"
df_population[df_population$CountryOrRegion == "French Guiana", "iso3c"] = "GUF"
df_population[df_population$CountryOrRegion == "Martinique", "iso3c"] = "MTQ"
df_population[df_population$CountryOrRegion == "Republic of Ireland", "iso3c"] = "IRL"
df_population[df_population$CountryOrRegion == "St. Martin", "iso3c"] = "MAF"
df_population[df_population$CountryOrRegion == "Brunei", "iso3c"] = "BRN"
df_population[df_population$CountryOrRegion == "Holy See", "iso3c"] = "VAT"
df_population[df_population$CountryOrRegion == "Reunion", "iso3c"] = "REU"
df_population[df_population$CountryOrRegion == "Slovakia", "iso3c"] = "SVK"
df_population[df_population$CountryOrRegion == "Congo (Kinshasa)", "iso3c"] = "COD"
df_population[df_population$CountryOrRegion == "Reunion", "iso3c"] = "REU"
df_population <- df_population %>% left_join(world_population,
by = c("iso3c")) %>%
select(CountryOrRegion, iso3c, population = population.y)
df_corona <- df_corona %>% left_join(df_population, by = c("CountryOrRegion"))
df_corona %>% group_by(ObservationDate) %>% summarise_if(is.numeric, sum) %>%
ggplot(aes(x = ObservationDate, y = Confirmed, color = )) +
geom_line() +
theme_minimal()
get_population_of_country <- function(country, df_corona){
population <- df_corona %>% group_by(iso3c) %>%
summarise(population = first(population)) %>%
filter(str_detect(iso3c, country)) %>%
.$population %>% sum(na.rm = T)
population
}
get_population_of_country("CHN", df_corona)
get_forecast_model <- function(country = "CHN", df_corona){
MIN_RECORDS_NEEDED <- 7
LAST_N_TO_CONSIDER <- MIN_RECORDS_NEEDED
DEFAULT_RATE <- 1.5
df <- df_corona %>%
filter(str_detect(iso3c, country)) %>%
group_by(ObservationDate) %>% summarise_if(is.numeric, sum) %>%
select(ds = ObservationDate,
y = Confirmed,
last_y = ConfirmedTillYesterDate)
validate(
need(nrow(df) > MIN_RECORDS_NEEDED, 'Not enough data')
)
today_count <- max(df$y)
df <- df %>% mutate(rate_of_change = y/last_y) %>% arrange(ds)
nth_highest <- 1
rate_of_change <- df %>%
tail(LAST_N_TO_CONSIDER) %>%
pluck("rate_of_change") %>%
sort(partial = length(.) - nth_highest) %>%
.[length(.) - nth_highest]
rate_of_change <- ifelse(rate_of_change <= 1, DEFAULT_RATE, rate_of_change)
df$cap <- as.integer(today_count * rate_of_change)
m <- prophet(df, growth = "logistic",
daily.seasonality = F,
yearly.seasonality = F,
weekly.seasonality = T)
m
}
get_forecast <- function(model, nDays = 7){
future <- make_future_dataframe(model, periods = nDays, freq = "day")
future$cap <- max(model$history$cap)
fcst <- predict(model, future)
fcst
}
m <- get_forecast_model("ITA", df_corona)
fcst <- get_forecast(m)
get_population_of_country("CHN", df_corona)
plot(m, fcst, plot_cap = T)
prophet_plot_components(m, fcst)
dyplot.prophet(m, fcst, uncertainty = T)
df_corona %>% distinct(CountryOrRegion)
renderDygraph
library(dygraphs)
renderDygraph
ggplotly(prophet_plot_components(m, fcst))
pacman::p_load(
tidyverse,
lubridate,
prophet,
wbstats,
shiny,
dygraphs,
plotly)
ggplotly(prophet_plot_components(m, fcst))
## ---------------------------
##
## Script name: Inspect data files
##
## Purpose of script: Check the data files we have
##
## Author: Amandeep Jiddewar
##
## Date Created: 2020-03-12
##
## "We are drowning in information, while starving for wisdom - E. O. Wilson"
##
## ---------------------------
##----------------------------------------------------------------------------##
## Import the libraries ####
##----------------------------------------------------------------------------##
if (!require("pacman")) install.packages("pacman")
pacman::p_load(
tidyverse,
lubridate,
prophet,
wbstats,
shiny,
dygraphs)
##----------------------------------------------------------------------------##
## Read Data ####
##----------------------------------------------------------------------------##
df_corona_raw <- read_csv("input/novel-corona-virus-2019-dataset/covid_19_data.csv")
##----------------------------------------------------------------------------##
## Data preparation ####
##----------------------------------------------------------------------------##
df_corona_raw <- df_corona_raw %>% rename(ProvinceOrState = `Province/State`,
CountryOrRegion = `Country/Region`,
LatestUpdate = `Last Update`)
df_corona <- df_corona_raw %>% select(-c(LatestUpdate, SNo))
df_corona <- df_corona %>% mutate(Confirmed = as.integer(Confirmed),
Deaths = as.integer(Deaths),
Recovered = as.integer(Recovered),
ObservationDate = parse_date_time(ObservationDate, orders = c("m/d/Y", "m/d/y")),
#LatestUpdate = parse_date_time(LatestUpdate, orders = c("m/d/Y", "m/d/y"), locale = "eng")
)
df_corona <- df_corona %>% mutate(ObservationDate = as.Date(ObservationDate))
df_corona <- df_corona %>% mutate(YesterDate = ObservationDate - 1)
df_corona <- df_corona %>% left_join(df_corona, by = c("YesterDate" = "ObservationDate", "ProvinceOrState", "CountryOrRegion"),
suffix = c("", "TillYesterDate")) %>% select(-YesterDateTillYesterDate)
df_corona <- df_corona %>% mutate(ConfirmedTillYesterDate = ifelse(is.na(ConfirmedTillYesterDate), Confirmed, ConfirmedTillYesterDate),
RecoveredTillYesterDate = ifelse(is.na(RecoveredTillYesterDate), Recovered, RecoveredTillYesterDate),
DeathsTillYesterDate = ifelse(is.na(DeathsTillYesterDate), Deaths, DeathsTillYesterDate))
df_corona <- df_corona %>% mutate(NewTodayConfirmed = Confirmed - ConfirmedTillYesterDate,
NewTodayRecovered = Recovered - RecoveredTillYesterDate,
NewTodayDeaths    = Deaths    - DeathsTillYesterDate)
corona_latest <- df_corona %>% filter(ObservationDate %in% max(df_corona$ObservationDate))
sum(corona_latest$Confirmed)
sum(corona_latest$Deaths)
sum(corona_latest$Recovered)
##----------------------------------------------------------------------------##
## Country-Wise population ####
##----------------------------------------------------------------------------##
countries <- df_corona %>% distinct(CountryOrRegion)
countries <- countries %>% mutate(corona_df_name = CountryOrRegion,
wb_df_name = CountryOrRegion)
world_population <- wb(indicator = "SP.POP.TOTL", startdate = 2017, enddate = 2017) %>%
select(iso3c, country, population = value)
df_population <- countries %>% left_join(world_population,
by = c("wb_df_name" = "country"))
df_population[df_population$CountryOrRegion == "Mainland China", "iso3c"] = "CHN"
df_population[df_population$CountryOrRegion == "Hong Kong", "iso3c"] = "HKG"
df_population[df_population$CountryOrRegion == "Macau", "iso3c"] = "MAC"
df_population[df_population$CountryOrRegion == "US", "iso3c"] = "USA"
df_population[df_population$CountryOrRegion == "South Korea", "iso3c"] = "KOR"
df_population[df_population$CountryOrRegion == "Ivory Coast", "iso3c"] = "CIV"
df_population[df_population$CountryOrRegion == "UK", "iso3c"] = "GBR"
df_population[df_population$CountryOrRegion == "Egypt", "iso3c"] = "EGY"
df_population[df_population$CountryOrRegion == "Iran", "iso3c"] = "IRN"
df_population[df_population$CountryOrRegion == "Saint Barthelemy", "iso3c"] = "BLM"
df_population[df_population$CountryOrRegion == "Palestine", "iso3c"] = "PSE"
df_population[df_population$CountryOrRegion == "Russia", "iso3c"] = "RUS"
df_population[df_population$CountryOrRegion == "Slovakia", "iso3c"] = "SVK"
df_population[df_population$CountryOrRegion == "French Guiana", "iso3c"] = "GUF"
df_population[df_population$CountryOrRegion == "Martinique", "iso3c"] = "MTQ"
df_population[df_population$CountryOrRegion == "Republic of Ireland", "iso3c"] = "IRL"
df_population[df_population$CountryOrRegion == "St. Martin", "iso3c"] = "MAF"
df_population[df_population$CountryOrRegion == "Brunei", "iso3c"] = "BRN"
df_population[df_population$CountryOrRegion == "Holy See", "iso3c"] = "VAT"
df_population[df_population$CountryOrRegion == "Reunion", "iso3c"] = "REU"
df_population[df_population$CountryOrRegion == "Slovakia", "iso3c"] = "SVK"
df_population[df_population$CountryOrRegion == "Congo (Kinshasa)", "iso3c"] = "COD"
df_population[df_population$CountryOrRegion == "Reunion", "iso3c"] = "REU"
# Countries which were not classified correctly
#df_population %>% filter(is.na(iso3c))
df_population <- df_population %>% left_join(world_population,
by = c("iso3c")) %>%
select(CountryOrRegion, iso3c, population = population.y)
df_corona <- df_corona %>% left_join(df_population, by = c("CountryOrRegion"))
df_corona %>% group_by(ObservationDate) %>% summarise_if(is.numeric, sum) %>%
ggplot(aes(x = ObservationDate, y = Confirmed, color = )) +
geom_line() +
theme_minimal()
get_population_of_country <- function(country, df_corona){
population <- df_corona %>% group_by(iso3c) %>%
summarise(population = first(population)) %>%
filter(str_detect(iso3c, country)) %>%
.$population %>% sum(na.rm = T)
population
}
get_population_of_country("CHN", df_corona)
get_forecast_model <- function(country = "CHN", df_corona){
MIN_RECORDS_NEEDED <- 7
LAST_N_TO_CONSIDER <- MIN_RECORDS_NEEDED
DEFAULT_RATE <- 1.5
df <- df_corona %>%
filter(str_detect(iso3c, country)) %>%
group_by(ObservationDate) %>% summarise_if(is.numeric, sum) %>%
select(ds = ObservationDate,
y = Confirmed,
last_y = ConfirmedTillYesterDate)
validate(
need(nrow(df) > MIN_RECORDS_NEEDED, 'Not enough data')
)
today_count <- max(df$y)
df <- df %>% mutate(rate_of_change = y/last_y) %>% arrange(ds)
nth_highest <- 1
rate_of_change <- df %>%
tail(LAST_N_TO_CONSIDER) %>%
pluck("rate_of_change") %>%
sort(partial = length(.) - nth_highest) %>%
.[length(.) - nth_highest]
rate_of_change <- ifelse(rate_of_change <= 1, DEFAULT_RATE, rate_of_change)
df$cap <- as.integer(today_count * rate_of_change)
m <- prophet(df, growth = "logistic",
daily.seasonality = F,
yearly.seasonality = F,
weekly.seasonality = T)
m
}
get_forecast <- function(model, nDays = 7){
future <- make_future_dataframe(model, periods = nDays, freq = "day")
future$cap <- max(model$history$cap)
fcst <- predict(model, future)
fcst
}
m <- get_forecast_model("ITA", df_corona)
fcst <- get_forecast(m)
get_population_of_country("CHN", df_corona)
plot(m, fcst, plot_cap = T)
prophet_plot_components(m, fcst)
dyplot.prophet(m, fcst, uncertainty = T)
df_corona_raw <- read_csv("input/novel-corona-virus-2019-dataset/covid_19_data.csv")
df_corona_raw <- read_csv("../input/novel-corona-virus-2019-dataset/covid_19_data.csv")
if (!require("pacman")) install.packages("pacman")
if (!require("pacman")) install.packages("pacman")
pacman::p_load(
tidyverse,
lubridate,
prophet,
wbstats,
shiny,
dygraphs)
df_corona_raw <- read_csv("../input/novel-corona-virus-2019-dataset/covid_19_data.csv")
df_corona_raw <- read_csv("/input/novel-corona-virus-2019-dataset/covid_19_data.csv")
df_corona_raw <- read_csv("input/novel-corona-virus-2019-dataset/covid_19_data.csv")
df_corona_raw <- df_corona_raw %>% rename(ProvinceOrState = `Province/State`,
CountryOrRegion = `Country/Region`,
LatestUpdate = `Last Update`)
df_corona <- df_corona_raw %>% select(-c(LatestUpdate, SNo))
df_corona <- df_corona %>% mutate(Confirmed = as.integer(Confirmed),
Deaths = as.integer(Deaths),
Recovered = as.integer(Recovered),
ObservationDate = parse_date_time(ObservationDate, orders = c("m/d/Y", "m/d/y")),
#LatestUpdate = parse_date_time(LatestUpdate, orders = c("m/d/Y", "m/d/y"), locale = "eng")
)
df_corona <- df_corona %>% mutate(ObservationDate = as.Date(ObservationDate))
df_corona <- df_corona %>% mutate(YesterDate = ObservationDate - 1)
df_corona <- df_corona %>% left_join(df_corona, by = c("YesterDate" = "ObservationDate", "ProvinceOrState", "CountryOrRegion"),
suffix = c("", "TillYesterDate")) %>% select(-YesterDateTillYesterDate)
df_corona <- df_corona %>% mutate(ConfirmedTillYesterDate = ifelse(is.na(ConfirmedTillYesterDate), Confirmed, ConfirmedTillYesterDate),
RecoveredTillYesterDate = ifelse(is.na(RecoveredTillYesterDate), Recovered, RecoveredTillYesterDate),
DeathsTillYesterDate = ifelse(is.na(DeathsTillYesterDate), Deaths, DeathsTillYesterDate))
df_corona <- df_corona %>% mutate(NewTodayConfirmed = Confirmed - ConfirmedTillYesterDate,
NewTodayRecovered = Recovered - RecoveredTillYesterDate,
NewTodayDeaths    = Deaths    - DeathsTillYesterDate)
df_corona
get_population_of_country <- function(country, df_corona){
population <- df_corona %>% group_by(iso3c) %>%
summarise(population = first(population)) %>%
filter(str_detect(iso3c, country)) %>%
.$population %>% sum(na.rm = T)
population
}
get_population_of_country("CHN", df_corona)
get_forecast_model <- function(country = "India", df_corona){
MIN_RECORDS_NEEDED <- 7
LAST_N_TO_CONSIDER <- MIN_RECORDS_NEEDED
DEFAULT_RATE <- 1.5
df <- df_corona %>%
filter(str_detect(CountryOrRegion, country)) %>%
group_by(ObservationDate) %>% summarise_if(is.numeric, sum) %>%
select(ds = ObservationDate,
y = Confirmed,
last_y = ConfirmedTillYesterDate)
validate(
need(nrow(df) > MIN_RECORDS_NEEDED, 'Not enough data')
)
today_count <- max(df$y)
df <- df %>% mutate(rate_of_change = y/last_y) %>% arrange(ds)
nth_highest <- 1
rate_of_change <- df %>%
tail(LAST_N_TO_CONSIDER) %>%
pluck("rate_of_change") %>%
sort(partial = length(.) - nth_highest) %>%
.[length(.) - nth_highest]
rate_of_change <- ifelse(rate_of_change <= 1, DEFAULT_RATE, rate_of_change)
df$cap <- as.integer(today_count * rate_of_change)
m <- prophet(df, growth = "logistic",
daily.seasonality = F,
yearly.seasonality = F,
weekly.seasonality = T)
m
}
get_forecast <- function(model, nDays = 7){
future <- make_future_dataframe(model, periods = nDays, freq = "day")
future$cap <- max(model$history$cap)
fcst <- predict(model, future)
fcst
}
m <- get_forecast_model("India", df_corona)
fcst <- get_forecast(m)
get_population_of_country("CHN", df_corona)
plot(m, fcst, plot_cap = T)
prophet_plot_components(m, fcst)
dyplot.prophet(m, fcst, uncertainty = T)
m <- get_forecast_model("Mainland China", df_corona)
fcst <- get_forecast(m)
plot(m, fcst, plot_cap = T)
prophet_plot_components(m, fcst)
dyplot.prophet(m, fcst, uncertainty = T)
if (!require("pacman")) install.packages("pacman")
pacman::p_load(
tidyverse,
lubridate,
prophet,
wbstats,
shiny,
dygraphs)
df_corona_raw <- read_csv("../input/novel-corona-virus-2019-dataset/covid_19_data.csv")
df_corona_raw <- read_csv("/input/novel-corona-virus-2019-dataset/covid_19_data.csv")
df_corona_raw <- read_csv("input/novel-corona-virus-2019-dataset/covid_19_data.csv")
df_corona_raw <- df_corona_raw %>% rename(ProvinceOrState = `Province/State`,
CountryOrRegion = `Country/Region`,
LatestUpdate = `Last Update`)
df_corona <- df_corona_raw %>% select(-c(LatestUpdate, SNo))
df_corona <- df_corona %>% mutate(Confirmed = as.integer(Confirmed),
Deaths = as.integer(Deaths),
Recovered = as.integer(Recovered),
ObservationDate = parse_date_time(ObservationDate, orders = c("m/d/Y", "m/d/y")),
#LatestUpdate = parse_date_time(LatestUpdate, orders = c("m/d/Y", "m/d/y"), locale = "eng")
)
df_corona <- df_corona %>% mutate(ObservationDate = as.Date(ObservationDate))
df_corona <- df_corona %>% mutate(YesterDate = ObservationDate - 1)
df_corona <- df_corona %>% left_join(df_corona, by = c("YesterDate" = "ObservationDate", "ProvinceOrState", "CountryOrRegion"),
suffix = c("", "TillYesterDate")) %>% select(-YesterDateTillYesterDate)
df_corona <- df_corona %>% mutate(ConfirmedTillYesterDate = ifelse(is.na(ConfirmedTillYesterDate), Confirmed, ConfirmedTillYesterDate),
RecoveredTillYesterDate = ifelse(is.na(RecoveredTillYesterDate), Recovered, RecoveredTillYesterDate),
DeathsTillYesterDate = ifelse(is.na(DeathsTillYesterDate), Deaths, DeathsTillYesterDate))
df_corona <- df_corona %>% mutate(NewTodayConfirmed = Confirmed - ConfirmedTillYesterDate,
NewTodayRecovered = Recovered - RecoveredTillYesterDate,
NewTodayDeaths    = Deaths    - DeathsTillYesterDate)
get_forecast_model <- function(country = "India", df_corona){
MIN_RECORDS_NEEDED <- 7
LAST_N_TO_CONSIDER <- MIN_RECORDS_NEEDED
DEFAULT_RATE <- 1.5
df <- df_corona %>%
filter(str_detect(CountryOrRegion, country)) %>%
group_by(ObservationDate) %>% summarise_if(is.numeric, sum) %>%
select(ds = ObservationDate,
y = Confirmed,
last_y = ConfirmedTillYesterDate)
validate(
need(nrow(df) > MIN_RECORDS_NEEDED, 'Not enough data')
)
today_count <- max(df$y)
df <- df %>% mutate(rate_of_change = y/last_y) %>% arrange(ds)
nth_highest <- 1
rate_of_change <- df %>%
tail(LAST_N_TO_CONSIDER) %>%
pluck("rate_of_change") %>%
sort(partial = length(.) - nth_highest) %>%
.[length(.) - nth_highest]
rate_of_change <- ifelse(rate_of_change <= 1, DEFAULT_RATE, rate_of_change)
df$cap <- as.integer(today_count * rate_of_change)
m <- prophet(df, growth = "logistic",
daily.seasonality = F,
yearly.seasonality = F,
weekly.seasonality = T)
m
}
get_forecast <- function(model, nDays = 7){
future <- make_future_dataframe(model, periods = nDays, freq = "day")
future$cap <- max(model$history$cap)
fcst <- predict(model, future)
fcst
}
m <- get_forecast_model("Mainland China", df_corona)
fcst <- get_forecast(m)
plot(m, fcst, plot_cap = T)
prophet_plot_components(m, fcst)
dyplot.prophet(m, fcst, uncertainty = T)
df_corona %>% arrange(desc(Confirmed))
df_corona %>% arrange(desc(Confirmed)) %>% distinct(CountryOrRegion)
knitr::opts_chunk$set(echo = TRUE)
quotes <- c("Look deep into nature, and then you will understand everything better.",
"A fool thinks himself to be wise, but a wise man knows himself to be a fool.",
"My mission in life is not merely to survive, but to thrive; and to do so with some passion, some compassion, some humor, and some style.")
library(bsselectR)
install.packages("bsselectR")
library(bsselectR)
install.packages('rsconnect')
rsconnect::setAccountInfo(name='amandeepfj',
token='CC1F843F8F27A8D9660345114E01CB6C',
secret='yzyahXU0xhDKgla/8E6dGEGkNR0brATft7yBgu+S')
library(httr)
dataset <- httr::GET("https://www.kaggle.com/api/v1/competitions/data/download/10445/train.csv",
httr::authenticate(username, authkey, type = "basic"))
dataset <- httr::GET("https://www.kaggle.com/api/v1/competitions/data/download/10445/train.csv",
httr::authenticate(amandeepfj, authkey, type = "basic"))
dataset <- httr::GET("https://www.kaggle.com/api/v1/competitions/data/download/10445/train.csv",
httr::authenticate("amandeepfj", authkey, type = "basic"))
dataset <- httr::GET("https://www.kaggle.com/api/v1/competitions/data/download/10445/train.csv",
httr::authenticate("amandeepfj", 'authkey', type = "basic"))
dataset
temp <- tempfile()
download.file(dataset$url,temp)
dataset <- httr::GET("https://www.kaggle.com/api/v1/competitions/data/download/10445/train.csv",
httr::authenticate("amandeepfj", 'Imaginecup@1', type = "basic"))
temp <- tempfile()
download.file(dataset$url,temp)
dataset <- httr::GET("https://www.kaggle.com/sudalairajkumar/novel-corona-virus-2019-dataset/download/uMF6QnlPB7ScS6BxTw1I%2Fversions%2FT0g6lkKCmysMJk9FhyLI%2Ffiles%2Fcovid_19_data.csv?datasetVersionNumber=32",
httr::authenticate("amandeepfj", 'Imaginecup@1', type = "basic"))
dataset <- httr::GET("https://www.kaggle.com/sudalairajkumar/novel-corona-virus-2019-dataset/download/uMF6QnlPB7ScS6BxTw1I%2Fversions%2FT0g6lkKCmysMJk9FhyLI%2Ffiles%2Fcovid_19_data.csv?datasetVersionNumber=32",
httr::authenticate("amandeepfj", 'Imaginecup@1', type = "basic"))
devtools::install_packages("mkearney/kaggler")
install_packages("mkearney/kaggler")
devtools::install_github("mkearney/kaggler")
kgl_auth(username = "mkearney", key = "9as87f6faf9a8sfd76a9fsd89asdf6dsa9f8")
library(kaggler)
kgl_auth(username = "mkearney", key = "9as87f6faf9a8sfd76a9fsd89asdf6dsa9f8")
kgl_competitions_list()
kgl_datasets_list()
kgl_competitions_data_download
kgl_competitions_data_download()
?kgl_competitions_data_download()
kgl_competitions_data_download("Novel Corona Virus 2019 Dataset")
kgl_competitions_data_download("Novel Corona Virus 2019 Dataset", "covid_19_data.csv")
kgl_competitions_data_download("Novel Corona Virus 2019 Dataset", "/covid_19_data.csv")
kgl_competitions_data_download("Novel Corona Virus 2019 Dataset", "novel-corona-virus-2019-dataset/covid_19_data.csv")
library(tidyverse,
lubridate,
prophet,
wbstats,
shiny,
dygraphs)
library(tidyverse,
lubridate,
prophet,
shiny,
dygraphs)
library(tidyverse)
library(lubridate)
library(prophet)
library(wbstats)
library(shiny)
library(dygraphs)
library(curl)
x <- read.csv( curl("https://raw.githubusercontent.com/trinker/dummy/master/data/gcircles.csv") )
x
